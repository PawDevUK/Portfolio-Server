const { weekCombinations } = require('../store/store');
const { v4: uuidv4 } = require('uuid');
const moment = require('moment');

const {
    getHoursFromStart,
    getDuration,
    calcEarnedForDay,
    getFinishBasic,
    getIn_OffDays,
    findCutOfDays,
    reduceFloat,
    calcPercent,
    countDays,
} = require('./calculate.js'); // calculate earnings

function addId() {
    return uuidv4();
}

function getMonthName(m) {
    return moment().month(m).format('MMMM');
}

function getMonthNumber(name) {
    return moment().month(name).format("M");
}

function getDayNumber(day) {
    return moment().date(day);
}

function getYear(date) {
    return moment().year(date);
}

function getNameOfWeekDay(payload, i) {
    return moment(payload).date(i).format('dddd');
}

function extractDateFromString(str) {
    return str.split(/[/" ":]/).map(i => parseInt(i));
}

function returnDate(dateArg, extractDateFromString, day, startTime) {
    let payload = [];
    let dateElement = '';
    if (Array.isArray(dateArg)) {
        dateArg.forEach((i) => {
            if (typeof i === 'string' && dateArg.length === 1) {
                payload = extractDateFromString(dateArg[0]);
            } else if (typeof i === 'string' && dateArg.length >= 2) {
                payload.push(parseInt(i));
            } else if (typeof i === 'number') {
                payload.push(i);
            }
        });
    }
    if (!moment.isMoment(dateArg) && typeof dateArg === 'string') {
        payload = extractDateFromString(dateArg);
    }
    if (moment.isMoment(dateArg) && startTime && day) {
        let H = startTime.substring(0, 2);
        let M = startTime.substring(3, 5);
        dateElement = moment(dateArg).date(day).hour(H).minute(M);
    }
    if (payload.length === 2) {
        dateElement = moment([payload[1], payload[0] - 1]);
    } else if (payload.length === 3) {
        dateElement = moment([payload[2], payload[1] - 1, payload[0]])
    } else if (payload.length === 4) {
        dateElement = moment([payload[2], payload[1] - 1, payload[0], payload[3]])
    } else if (payload.length === 5) {
        dateElement = moment([payload[2], payload[1] - 1, payload[0], payload[3], payload[4]]);
    }
    return dateElement;
}

function checkIN(arr, day, weekDay) {
    let IN = null
    if (arr.length >= 5) {
        IN = true;
        arr.forEach((i) => {
            if (i === day) {
                IN = false;
            }
        });
    } else if (arr.length === 2) {
        IN = true;
        arr.forEach((i) => {
            if (i === weekDay) {
                IN = false;
            }
        });
    }
    return IN;
}

/**
 * @function addPDandCOD
 * @name addPDandCOD
 * Function checks dates generated by helper functions findPayDays() and findCutOfDays() and adds pay dates and
 * cut off dates to a calendar object.
 */
function addPDandCOD(payDays, date, day) {
    let Element = false // pay day or cut off day 
    let DT = moment(date).date(day) // date
    payDays.forEach((ele, i) => {
        if (moment(DT).isSame(ele)) {
            Element = true
        }
    });
    return Element;
};

function findPayDays(payDay) {
    if (payDay) {
        let arr = [];
        arr.push(moment(payDay, "YYYY-MM-DD"));
        for (let i = 0; i <= 11; i++) {
            arr.push(moment(arr[i], "YYYY-MM-DD").add(4, 'w'));
        };
        return arr;
    }
    throw 'No Date Specified';
};

function getCombinations(weekCombinations, createMonth) {
    let result = []
    weekCombinations.forEach((i) => {
        const rota = {
            date: [9, 2022],
            OffDays: i
        }
        result.push(createMonth(rota))
    })
    return result;
}

function createMonth(rota, base_rate, start_Time) {
    const { OffDays, date } = rota;
    const DateArg = returnDate(date, extractDateFromString);
    const month = DateArg.month();
    const year = DateArg.year();
    const monthName = DateArg.format('MMMM');
    const days = DateArg.daysInMonth();

    const FirstPayDay = '2022-04-29';
    const payDays = findPayDays(FirstPayDay);
    const cutOffD = findCutOfDays(payDays);

    let calendar = {
        name: monthName,
        fixedWorkingDays: null, // it is used only if working rota has same days in the week e.g 'Wednesday','Saturday'
        month: month + 1,
        year,
        numberOfDaysInCalMonth: days,
        OFF_Days: null,
        IN_Days: null,
        IN_weekDays: null,
        IN_fri: null,
        IN_sat: null,
        IN_sun: null,
        rates: {
            currency: 'GBP',
            basic: base_rate,
            nights: {
                percent: 25,
                rate: null,
            },
            weekends: {
                percent: 33,
                rate: null,
            },
            overtime: {
                percent: 50,
                rate: null,
            },
        },
        day_pay: {},
        basic_salary: {},
        calendar: [],
    };

    for (let i = 1; i <= days; i++) {
        let weekDay = getNameOfWeekDay(DateArg, i);
        let date = returnDate(DateArg, extractDateFromString, i, start_Time);
        let inWork = checkIN(OffDays, i, weekDay);
        let timesEarned = calcEarnedForDay(
            calendar.rates,
            getHoursFromStart,
            getDuration,
            getFinishBasic,
            calcPercent,
            date,
            reduceFloat,
            inWork
        );
        calendar.calendar.push({
            date,
            weekDay,
            day: i,
            start: inWork ? moment(date).format('HH:mm') : null,
            finishBasic: inWork ? getFinishBasic(date).format('HH:mm') : null,
            finishOvertime: null,
            hours: timesEarned.times,
            earnedFromHours: timesEarned.earned,
            inWork,
            payDay: addPDandCOD(payDays, DateArg, i),
            cutOffDay: addPDandCOD(cutOffD, DateArg, i),
            id: addId(),
        });
    }



    const d = getIn_OffDays(calendar);
    calendar.OFF_Days = d.off;
    calendar.IN_Days = d.in;

    const { w, f, sa, su } = countDays(calendar);
    calendar.IN_weekDays = w;
    calendar.IN_fri = f;
    calendar.IN_sat = sa;
    calendar.IN_sun = su;

    // calendar.day_pay = calcEarnedForDay(calendar.rates, calcPercent, reduceFloat, start_Time);
    // calendar.basic_salary = calcEarnedFor_Month(calendar, reduceFloat);

    const rates = calendar.rates;
    rates.nights.rate = reduceFloat(calcPercent(rates.basic, rates.nights.percent));
    rates.weekends.rate = reduceFloat(calcPercent(rates.basic, rates.weekends.percent));
    rates.overtime.rate = reduceFloat(calcPercent(rates.basic, rates.overtime.percent));


    //returns calendar object with calculated values
    return calendar;
}

function createYearCalendar(rota, getMonthNumber, createMonth, calcPayDay, baseNewRate, start_Time, year) {
    let yearCalendar = [];
    const yearPlus = year + 1;
    let date = [year];
    let OffDays = [];

    for (const prop in rota) {
        let monthN = getMonthNumber(prop);

        // Checks if month in the rota is in the correct year as a calendar runs from April till March
        if (monthN <= 3) {
            date.pop();
            date.push(yearPlus);
        }

        if (date.length === 1) {
            date.unshift(monthN);
        } else if (date.length === 2) {
            date.shift();
            date.unshift(getMonthNumber(prop));
        }
        OffDays = rota[prop];

        yearCalendar.push(
            createMonth({
                date,
                OffDays
            }, baseNewRate, start_Time)
        );
    }

    return calcPayDay(yearCalendar);
}

function formatDate(date) {
    return moment(date, "ddd MMM DD YYYY HH:mm:ss [GMT]ZZ (z)")
}

function convertDaysArrayIntoRota(array, getDayNumber, getMonthName, getYear) {
    let rota = {
        year: null,
        months: {
            April: [],
            May: [],
            June: [],
            July: [],
            August: [],
            September: [],
            October: [],
            November: [],
            December: [],
            January: [],
            February: [],
            March: [],
        }
    };

    if (array.length !== 0) {
        rota.year = getYear(formatDate(array[0]));

        array.forEach((day) => {
            const monthName = getMonthName(formatDate(day));
            const dayNumber = getDayNumber(formatDate(day));

            if (rota.months[monthName]) {
                rota.months[monthName].push(dayNumber);
            } else {
                console.error(`Invalid month name: ${monthName}`);
            }
        });
    }

    return rota;
};

module.exports = {
    convertDaysArrayIntoRota,
    extractDateFromString,
    returnDate,
    getMonthName,
    checkIN,
    getNameOfWeekDay,
    getCombinations,
    findPayDays,
    getMonthNumber,
    createYearCalendar,
    addPDandCOD,
    addId,
    getDayNumber,
    getYear,
    formatDate,
    createMonth
};